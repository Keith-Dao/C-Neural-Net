name: C++ Tests

on:
  pull_request:
    branches: ['main']

permissions:
  contents: read

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/install/dependencies
          key: dependencies

      - name: Install Eigen
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          wget -O eigen.zip "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip" 
          unzip eigen.zip 
          cd eigen-3.4.0 
          cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
          cd build 
          sudo make install

      - name: Install JSON
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          wget -O json.zip "https://github.com/nlohmann/json/archive/refs/tags/v3.11.2.zip" 
          unzip json.zip 
          cd json-3.11.2
          cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
          cd build 
          sudo make install

      - name: Install YAML
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          wget -O yaml.zip "https://github.com/jbeder/yaml-cpp/archive/refs/tags/yaml-cpp-0.6.3.zip" 
          unzip yaml.zip 
          cd yaml-cpp-yaml-cpp-0.6.3 
          cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
          cd build 
          sudo make install

      - name: Install Matplot++
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          wget -O matplotplusplus.zip "https://github.com/alandefreitas/matplotplusplus/archive/refs/tags/v1.1.0.zip" 
          unzip matplotplusplus.zip 
          cd matplotplusplus-1.1.0
          cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
          cd build 
          sudo make install

      - name: Install Indicators
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          wget -O indicators.zip "https://github.com/p-ranav/indicators/archive/refs/tags/v2.3.zip" 
          unzip indicators.zip 
          cd indicators-2.3
          cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
          cd build 
          sudo make install

      - name: Install OpenCV
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          wget -O opencv.zip "https://github.com/opencv/opencv/archive/refs/tags/4.7.0.zip" 
          unzip opencv.zip 
          cd opencv-4.7.0
          cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
          cd build 
          sudo make install
      
      - name: Install Tabulate
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
          run: |
            wget -O tabulate.zip "https://github.com/p-ranav/tabulate/archive/refs/tags/v1.5.zip" 
            unzip tabulate.zip 
            cd tabulate-1.5
            cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
            cd build 
            sudo make install

      - name: Install Termcolor
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
          run: |
            wget -O termcolor.zip "https://github.com/ikalnytskyi/termcolor/archive/refs/tags/v2.1.0.zip" 
            unzip termcolor.zip 
            cd termcolor-2.1.0
            cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install/dependencies
            cd build 
            sudo make install

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH:PATH=${{ github.workspace }}/install/dependencies

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: make

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}
